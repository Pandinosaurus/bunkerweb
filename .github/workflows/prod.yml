name: Automatic test, build, push and deploy (PROD)

on:
  push:
    branches: [master]

jobs:

  # Build for amd64
  build-bw-amd64:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build images
      - name: Build BW for amd64
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-amd64-cache,mode=min
      - name: Build BW autoconf for amd64
        uses: docker/build-push-action@v3
        with:
          context: .
          file: autoconf/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-autoconf-amd64-cache,mode=min
      - name: Build BW UI for amd64
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ui/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ui-tests-amd64:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-ui-amd64-cache,mode=min

  # Build for 386
  build-bw-386:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build images
      - name: Build BW for 386
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/386
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-386:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-386-cache,mode=min
      - name: Build BW autoconf for 386
        uses: docker/build-push-action@v3
        with:
          context: .
          file: autoconf/Dockerfile
          platforms: linux/386
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-386:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-autoconf-386-cache,mode=min
      - name: Build BW UI for 386
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ui/Dockerfile
          platforms: linux/386
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ui-tests-386:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-ui-386-cache,mode=min

  # Build for ARM
  build-bw-arm:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Setup SSH for ARM node
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa_arm
          chmod 600 ~/.ssh/id_rsa_arm
          echo "$SSH_CONFIG" > ~/.ssh/config
        env:
          SSH_KEY: ${{ secrets.ARM_SSH_KEY }}
          SSH_CONFIG: ${{ secrets.ARM_SSH_CONFIG }}
      - name: Append ARM node to buildx
        run: |
          docker buildx create --append --name ${{ steps.buildx.outputs.name }} --node arm --platform linux/arm64,linux/arm/v7,linux/arm/v6 ssh://ubuntu@arm
      # Build images
      - name: Build BW for ARM
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/arm64,linux/arm/v7
          tags: bunkerweb-tests-arm:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-arm-cache,mode=min
      - name: Build BW autoconf for ARM
        uses: docker/build-push-action@v3
        with:
          context: .
          file: autoconf/Dockerfile
          platforms: linux/arm64,linux/arm/v7
          tags: bunkerweb-autoconf-tests-arm:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-autoconf-arm-cache,mode=min
      - name: Build BW UI for ARM
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ui/Dockerfile
          platforms: linux/arm64,linux/arm/v7
          tags: bunkerweb-ui-tests-arm:latest
          cache-to: type=registry,ref=bunkerity/cache:bw-ui-arm-cache,mode=min

  # Build linux ubuntu
  build-bw-ubuntu:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build package image
      - name: Build ubuntu package image
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          file: linux/Dockerfile-ubuntu
          platforms: linux/amd64
          tags: local/bunkerweb-ubuntu:latest
      # Generate package
      - name: Generate ubuntu deb
        run: ./linux/package.sh ubuntu
      - uses: actions/upload-artifact@v3
        with:
          name: package-ubuntu
          path: package-ubuntu/*.deb
      # Build test image
      - name: Build BW ubuntu test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: tests/linux/Dockerfile-ubuntu
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ubuntu:latest

  # Build linux debian
  build-bw-debian:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build package image
      - name: Build debian package image
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          file: linux/Dockerfile-debian
          platforms: linux/amd64
          tags: local/bunkerweb-debian:latest
      # Generate package
      - name: Generate debian deb
        run: ./linux/package.sh debian
      - uses: actions/upload-artifact@v3
        with:
          name: package-debian
          path: package-debian/*.deb
      # Build test image
      - name: Build BW debian test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: tests/linux/Dockerfile-debian
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-debian:latest

  # Build linux centos
  build-bw-centos:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build package image
      - name: Build centos package image
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          file: linux/Dockerfile-centos
          platforms: linux/amd64
          tags: local/bunkerweb-centos:latest
      # Generate package
      - name: Generate centos rpm
        run: ./linux/package.sh centos
      - uses: actions/upload-artifact@v3
        with:
          name: package-centos
          path: package-centos/*.rpm
      # Build test image
      - name: Build BW centos test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: tests/linux/Dockerfile-centos
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-centos:latest

  # Build linux fedora
  build-bw-fedora:
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      # Build package image
      - name: Build fedora package image
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          file: linux/Dockerfile-fedora
          platforms: linux/amd64
          tags: local/bunkerweb-fedora:latest
      # Generate package
      - name: Generate fedora rpm
        run: ./linux/package.sh fedora
      - uses: actions/upload-artifact@v3
        with:
          name: package-fedora
          path: package-fedora/*.rpm
      # Build test image
      - name: Build BW fedora test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: tests/linux/Dockerfile-fedora
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-fedora:latest

  # Perform security checks
  security:
    needs: [build-bw-amd64]
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      - name: Import BW image
        run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest bunkerweb-tests-amd64:latest
      - name: Import BW autoconf image
        run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest bunkerweb-autoconf-tests-amd64:latest
      - name: Import BW UI image
        run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ui-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ui-tests-amd64:latest bunkerweb-ui-tests-amd64:latest
      # CVE check on OS
      - name: Check security vulnerabilities for BW
        uses: aquasecurity/trivy-action@master
        with:
          vuln-type: os
          image-ref: bunkerweb-tests-amd64:latest
          format: table
          exit-code: 1
          ignore-unfixed: false
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          trivyignores: .trivyignore
      - name: Check security vulnerabilities for autoconf
        uses: aquasecurity/trivy-action@master
        with:
          vuln-type: os
          image-ref: bunkerweb-autoconf-tests-amd64:latest
          format: table
          exit-code: 1
          ignore-unfixed: false
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          trivyignores: .trivyignore
      - name: Check security vulnerabilities for UI
        uses: aquasecurity/trivy-action@master
        with:
          vuln-type: os
          image-ref: bunkerweb-ui-tests-amd64:latest
          format: table
          exit-code: 1
          ignore-unfixed: false
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          trivyignores: .trivyignore

  # Create Docker infra
  # infra-create-docker:
  #   needs: [security]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Generate SSH keypair
  #       run: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N "" && ssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub && echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/ssh_config
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'
  #     - name: Install ansible
  #       run: pip install ansible
  #     - name: Install ansible libs
  #       run: ansible-galaxy install --timeout 120 monolithprojects.github_actions_runner && ansible-galaxy collection install --timeout 120 community.general
  #     # Create Docker infra
  #     - run: ./tests/create.sh docker
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}
  #     - run: tar -cvf terraform.tar /tmp/docker
  #       if: always()
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: tf-docker
  #         path: terraform.tar

  # # Create autoconf infra
  # infra-create-autoconf:
  #   needs: [security]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Generate SSH keypair
  #       run: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N "" && ssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub && echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/ssh_config
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'
  #     - name: Install ansible
  #       run: pip install ansible
  #     - name: Install ansible libs
  #       run: ansible-galaxy install --timeout 120 monolithprojects.github_actions_runner && ansible-galaxy collection install --timeout 120 community.general
  #     # Create Autoconf infra
  #     - run: ./tests/create.sh autoconf
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}
  #     - run: tar -cvf terraform.tar /tmp/autoconf
  #       if: always()
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: tf-autoconf
  #         path: terraform.tar

  # # Create swarm infra
  # infra-create-swarm:
  #   needs: [security]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Generate SSH keypair
  #       run: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N "" && ssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub && echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/ssh_config
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'
  #     - name: Install ansible
  #       run: pip install ansible
  #     - name: Install ansible libs
  #       run: ansible-galaxy install --timeout 120 monolithprojects.github_actions_runner && ansible-galaxy collection install --timeout 120 community.general
  #     # Create Swarm infra
  #     - run: ./tests/create.sh swarm
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}
  #     - run: tar -cvf terraform.tar /tmp/swarm
  #       if: always()
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: tf-swarm
  #         path: terraform.tar
  
  # # Create k8s infra
  # infra-create-k8s:
  #   needs: [security]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v3
  #     # Create k8s infra
  #     - run: ./tests/create.sh k8s
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}
  #     - run: tar -cvf terraform.tar /tmp/k8s
  #       if: always()
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: tf-k8s
  #         path: terraform.tar

  # # Create linux infra
  # infra-create-linux:
  #   needs: [build-bw-ubuntu, build-bw-debian, build-bw-centos, build-bw-fedora]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Generate SSH keypair
  #       run: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N "" && ssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub && echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/ssh_config
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'
  #     - name: Install ansible
  #       run: pip install ansible
  #     - name: Install ansible libs
  #       run: ansible-galaxy install --timeout 120 monolithprojects.github_actions_runner && ansible-galaxy collection install --timeout 120 community.general
  #     # Create Linux infra
  #     - run: ./tests/create.sh linux
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}
  #     - run: tar -cvf terraform.tar /tmp/linux
  #       if: always()
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: tf-linux
  #         path: terraform.tar

  # # Perform docker tests
  # tests-docker:
  #   needs: [infra-create-docker]
  #   runs-on: [self-hosted, bw-docker]
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Login to private repository
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.PRIVATE_REGISTRY }}
  #         username: registry
  #         password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
  #     - name: Pull BW image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest local/bw-tests:latest
  #     - name: Install test dependencies
  #       run: pip3 install -r tests/requirements.txt
  #     # Do tests
  #     - name: Run Docker tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "docker"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_DOCKER }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}

  # # Perform autoconf tests
  # tests-autoconf:
  #   needs: [infra-create-autoconf]
  #   runs-on: [self-hosted, bw-autoconf]
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Login to private repository
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.PRIVATE_REGISTRY }}
  #         username: registry
  #         password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
  #     - name: Pull BW image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest local/bw-tests:latest
  #     - name: Pull autoconf image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest local/bw-autoconf-tests:latest
  #     - name: Install test dependencies
  #       run: pip3 install -r tests/requirements.txt
  #     # Do tests
  #     - name: Run Autoconf tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "autoconf"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_AUTOCONF }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}

  # # Perform swarm tests
  # tests-swarm:
  #   needs: [infra-create-swarm]
  #   runs-on: [self-hosted, bw-swarm]
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Login to private repository
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.PRIVATE_REGISTRY }}
  #         username: registry
  #         password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
  #     - name: Pull BW image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-tests-amd64:latest 192.168.42.100:5000/bw-tests:latest && docker push 192.168.42.100:5000/bw-tests:latest
  #     - name: Pull autoconf image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf-tests-amd64:latest 192.168.42.100:5000/bw-autoconf-tests:latest && docker push 192.168.42.100:5000/bw-autoconf-tests:latest
  #     - name: Install test dependencies
  #       run: pip3 install -r tests/requirements.txt
  #     # Do tests
  #     - name: Run Swarm tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "swarm"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_SWARM }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}

  # # Perform k8s tests
  # tests-k8s:
  #   needs: [infra-create-k8s]
  #   runs-on: [ubuntu-latest]
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install test dependencies
  #       run: pip3 install -r tests/requirements.txt
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-k8s
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C /
  #     - uses: azure/setup-kubectl@v3
  #     - uses: azure/setup-helm@v3
  #     # Do tests
  #     - name: Run Kubernetes tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "kubernetes"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_KUBERNETES }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
  #         KUBECONFIG: "/tmp/k8s/kubeconfig"
  #         PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
  #         IMAGE_TAG: "latest"

  # # Perform linux tests
  # tests-linux:
  #   needs: [infra-create-linux]
  #   runs-on: [self-hosted, bw-linux]
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Login to private repository
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.PRIVATE_REGISTRY }}
  #         username: registry
  #         password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
  #     - name: Pull BW linux ubuntu test image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ubuntu:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ubuntu:latest local/bw-ubuntu:latest
  #     - name: Pull BW linux debian test image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-debian:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-debian:latest local/bw-debian:latest
  #     - name: Pull BW linux centos test image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-centos:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-centos:latest local/bw-centos:latest
  #     - name: Pull BW linux fedora test image
  #       run: docker pull ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-fedora:latest && docker tag ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-fedora:latest local/bw-fedora:latest
  #     - name: Install test dependencies
  #       run: pip3 install -r tests/requirements.txt
  #     # Do tests
  #     - name: Run Linux ubuntu tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "linux" "ubuntu"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
  #     - name: Run Linux debian tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "linux" "debian"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
  #     - name: Run Linux centos tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "linux" "centos"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
  #     - name: Run Linux fedora tests
  #       run: export $(echo "$TEST_DOMAINS" | xargs) && ./tests/main.py "linux" "fedora"
  #       env:
  #         TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
  #         ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}

  # # Remove docker infra
  # infra-rm-docker:
  #   if: ${{ always() }}
  #   needs: [tests-docker]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-docker
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C / && mkdir ~/.ssh && touch ~/.ssh/id_rsa.pub
  #     # Remove Docker infra
  #     - run: ./tests/rm.sh docker
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}

  # # Remove docker infra
  # infra-rm-autoconf:
  #   if: ${{ always() }}
  #   needs: [tests-autoconf]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-autoconf
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C / && mkdir ~/.ssh && touch ~/.ssh/id_rsa.pub
  #     # Remove Autoconf infra
  #     - run: ./tests/rm.sh autoconf
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}

  # # Remove swarm infra
  # infra-rm-swarm:
  #   if: ${{ always() }}
  #   needs: [tests-swarm]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-swarm
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C / && mkdir ~/.ssh && touch ~/.ssh/id_rsa.pub
  #     # Remove Swarm infra
  #     - run: ./tests/rm.sh swarm
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}

  # # Remove k8s infra
  # infra-rm-k8s:
  #   if: ${{ always() }}
  #   needs: [tests-k8s]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - uses: azure/setup-kubectl@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-k8s
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C /
  #     # Remove k8s infra
  #     - run: kubectl delete daemonsets,replicasets,services,deployments,pods,rc,ingress,statefulsets --all --all-namespaces --timeout=60s ; kubectl delete pvc --all --timeout=60s ; kubectl delete pv --all --timeout=60s
  #       continue-on-error: true
  #       env:
  #         KUBECONFIG: /tmp/k8s/kubeconfig
  #     - run: ./tests/rm.sh k8s
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}

  # # Remove linux infra
  # infra-rm-linux:
  #   if: ${{ always() }}
  #   needs: [tests-linux]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Prepare
  #     - name: Checkout source code
  #       uses: actions/checkout@v3
  #     - name: Install terraform
  #       uses: hashicorp/setup-terraform@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: tf-linux
  #         path: /tmp
  #     - run: tar xvf /tmp/terraform.tar -C / && mkdir ~/.ssh && touch ~/.ssh/id_rsa.pub
  #     # Remove Linux infra
  #     - run: ./tests/rm.sh linux
  #       env:
  #         CICD_SECRETS: ${{ secrets.CICD_SECRETS }}

  # Push to docker hub
  push-docker-hub:
    # needs: [tests-linux, tests-docker, tests-autoconf, tests-swarm, tests-k8s, build-bw-386, build-bw-arm]
    needs: [build-bw-amd64, build-bw-arm, build-bw-386, security]
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set variables
        run: |
          VER=$(cat VERSION | tr -d '\n')
          echo "VERSION=$VER" >> $GITHUB_ENV
      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to private repository
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: registry
          password: ${{ secrets.PRIVATE_REGISTRY_TOKEN }}
      - name: Setup SSH for ARM node
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa_arm
          chmod 600 ~/.ssh/id_rsa_arm
          echo "$SSH_CONFIG" > ~/.ssh/config
        env:
          SSH_KEY: ${{ secrets.ARM_SSH_KEY }}
          SSH_CONFIG: ${{ secrets.ARM_SSH_CONFIG }}
      - name: Append ARM node to buildx
        run: |
          docker buildx create --append --name ${{ steps.buildx.outputs.name }} --node arm --platform linux/arm64,linux/arm/v7,linux/arm/v6 ssh://ubuntu@arm
      # Build and push
      - name: Build and push BW
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb:latest,bunkerity/bunkerweb:latest,bunkerity/bunkerweb:${{ env.VERSION }}
          cache-from: |
            type=registry,ref=bunkerity/cache:bw-amd64-cache
            type=registry,ref=bunkerity/cache:bw-386-cache
            type=registry,ref=bunkerity/cache:bw-arm-cache
      - name: Build and push BW autoconf
        uses: docker/build-push-action@v3
        with:
          context: .
          file: autoconf/Dockerfile
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-autoconf:latest,bunkerity/bunkerweb-autoconf:latest,bunkerity/bunkerweb-autoconf:${{ env.VERSION }}
          cache-from: |
            type=registry,ref=bunkerity/cache:bw-autoconf-amd64-cache
            type=registry,ref=bunkerity/cache:bw-autoconf-386-cache
            type=registry,ref=bunkerity/cache:bw-autoconf-arm-cache
      - name: Build and push BW UI
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ui/Dockerfile
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ secrets.PRIVATE_REGISTRY }}/infra/bunkerweb-ui:latest,bunkerity/bunkerweb-ui:latest,bunkerity/bunkerweb-ui:${{ env.VERSION }}
          cache-from: |
            type=registry,ref=bunkerity/cache:bw-ui-amd64-cache
            type=registry,ref=bunkerity/cache:bw-ui-386-cache
            type=registry,ref=bunkerity/cache:bw-ui-arm-cache

  # Push to packagecloud
  push-packagecloud:
    # needs: [tests-linux, tests-docker, tests-autoconf, tests-swarm, tests-k8s]
    needs: [build-bw-ubuntu, build-bw-debian, build-bw-centos, build-bw-fedora]
    runs-on: ubuntu-latest
    steps:
      # Prepare
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set variables
        run: |
          VER=$(cat VERSION | tr -d '\n')
          echo "VERSION=$VER" >> $GITHUB_ENV
      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
      - name: Install packagecloud
        run: gem install package_cloud
      # Download packages
      - uses: actions/download-artifact@v3
        with:
          name: package-ubuntu
          path: /tmp/ubuntu
      - uses: actions/download-artifact@v3
        with:
          name: package-debian
          path: /tmp/debian
      - uses: actions/download-artifact@v3
        with:
          name: package-centos
          path: /tmp/centos
      - uses: actions/download-artifact@v3
        with:
          name: package-fedora
          path: /tmp/fedora
      # Remove existing packages
      - name: Remove Ubuntu DEB from packagecloud
        run: package_cloud yank bunkerity/bunkerweb/ubuntu/jammy bunkerweb_${{ env.VERSION }}_amd64.deb
        continue-on-error: true
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Remove Debian DEB from packagecloud
        run: package_cloud yank bunkerity/bunkerweb/debian/bullseye bunkerweb_${{ env.VERSION }}_amd64.deb
        continue-on-error: true
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Remove CentOS RPM from packagecloud
        run: package_cloud yank bunkerity/bunkerweb/el/8 bunkerweb-${{ env.VERSION }}-1.x86_64.rpm
        continue-on-error: true
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Remove Fedora RPM from packagecloud
        run: package_cloud yank bunkerity/bunkerweb/fedora/36 bunkerweb-${{ env.VERSION }}-1.x86_64.rpm
        continue-on-error: true
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      # Push packages
      - name: Push Ubuntu DEB to packagecloud
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: /tmp/ubuntu/bunkerweb_${{ env.VERSION }}-1_amd64.deb
          PACKAGECLOUD-USERNAME: bunkerity
          PACKAGECLOUD-REPO: bunkerweb
          PACKAGECLOUD-DISTRIB: ubuntu/jammy
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Push Debian DEB to packagecloud
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: /tmp/debian/bunkerweb_${{ env.VERSION }}-1_amd64.deb
          PACKAGECLOUD-USERNAME: bunkerity
          PACKAGECLOUD-REPO: bunkerweb
          PACKAGECLOUD-DISTRIB: debian/bullseye
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Push CentOS RPM to packagecloud
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: /tmp/centos/bunkerweb-${{ env.VERSION }}-1.x86_64.rpm
          PACKAGECLOUD-USERNAME: bunkerity
          PACKAGECLOUD-REPO: bunkerweb
          PACKAGECLOUD-DISTRIB: el/8
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      - name: Push Fedora RPM to packagecloud
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: /tmp/fedora/bunkerweb-${{ env.VERSION }}-1.x86_64.rpm
          PACKAGECLOUD-USERNAME: bunkerity
          PACKAGECLOUD-REPO: bunkerweb
          PACKAGECLOUD-DISTRIB: fedora/36
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
